!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/jangove/Documents/school/fall2022/mate464/calculations/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
CpAl	blocks.jl	/^function CpAl(T)$/;"	f
CpGlass	blocks.jl	/^function CpGlass(T)$/;"	f
CpHg	blocks.jl	/^function CpHg(T)$/;"	f
CpHg_l	blocks.jl	/^function CpHg_l(T)$/;"	f
CpHg_l	calculations.jl	/^CpHg_l(T) = 30.39u"J*mol^-1*K^-1" - 11.47e-3u"J*mol^-1*K^-2" * T ;$/;"	f
CpPowder	blocks.jl	/^function CpPowder(T)$/;"	f
CpWater	blocks.jl	/^function CpWater(T)$/;"	f
H	blocks.jl	/^    # This picks the heat capacity based on sp and pz if I don't do it manually$/;"	g	struct:comp
ID	blocks.jl	/^    function strm(cmp, T)$/;"	g	struct:strm
T	blocks.jl	/^    ID$/;"	g	struct:strm
absolute_h	blocks.jl	/^function absolute_h(Cp, T)$/;"	f
absolute_h	blocks.jl	/^function absolute_h(Cp::Function, T)$/;"	f
actual_Cp	test_run.jl	/^actual_Cp(T) = (30.39 - 11.47e-3 * T)\/200.59 # J\/(g K)$/;"	f
cfilter	blocks.jl	/^function cfilter(input::strm)$/;"	f
chiller	blocks.jl	/^function chiller(Q, Cpc, Tc, Th, effChiller)$/;"	f
chiller	blocks.jl	/^function chiller(coolant::comp, Qc)$/;"	f
cmp	blocks.jl	/^    cmp::Vector{comp}       # Vector of components$/;"	g	struct:strm
comp	blocks.jl	/^    function comp(m, h, sp, pz)$/;"	f	struct:comp
comp	blocks.jl	/^mutable struct comp$/;"	s
condenser	blocks.jl	/^function condenser(input::strm, Tout, efc, Pcond)$/;"	f
cp	blocks.jl	/^    H$/;"	g	struct:comp
energy_check	blocks.jl	/^function energy_check(input::Vector{strm}, output::Vector{strm})$/;"	f
energy_check	blocks.jl	/^function energy_check(input::Vector{strm}, output::Vector{strm}, Q)$/;"	f
f	blocks.jl	/^    f(T) = m3a*(quadgk(Cp_a, T0, T)[1] + dh_v_Hg) + m3b*Cp_b*(T - T0) - $/;"	f	function:mergestream
furnace	blocks.jl	/^function furnace(in1::strm, in2::strm, Tf, eff, r_F)$/;"	f
h	blocks.jl	/^    sp::AbstractString      # Species name$/;"	g	struct:comp
m	blocks.jl	/^    h                       # Specific enthalpy$/;"	g	struct:comp
mass_check	blocks.jl	/^function mass_check(input::Vector{strm}, output::Vector{strm})$/;"	f
mergestream	blocks.jl	/^function mergestream(stream1::strm, stream2::strm)$/;"	f
pz	blocks.jl	/^    pz::AbstractString      # Phase$/;"	g	struct:comp
recovery	blocks.jl	/^function recovery(Tout, Pcond)$/;"	f
sp	blocks.jl	/^    sp::AbstractString      # Species name$/;"	g	struct:comp
stream2vec	pfd.jl	/^function stream2vec(stream::strm)$/;"	f
streamenergy	blocks.jl	/^function streamenergy(stream::strm)$/;"	f
streamenergy	blocks.jl	/^function streamenergy(streams::Vector{strm})$/;"	f
streammass	blocks.jl	/^function streammass(stream::strm)$/;"	f
streammass	blocks.jl	/^function streammass(streams::Vector{strm})$/;"	f
strm	blocks.jl	/^    function strm(cmp, T)$/;"	f	struct:strm
strm	blocks.jl	/^mutable struct strm$/;"	s
v_P_Hg	blocks.jl	/^function v_P_Hg(T)$/;"	f
